services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: [ "CMD-SHELL", "echo stat | nc 127.0.0.1 2181 | grep Mode" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - store-network

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list" ]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - store-network

  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    env_file:
      - /api-gateway/.env
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_REDIS_HOST: redis
    depends_on:
      - redis
    networks:
      - store-network

  frontend-service:
    build:
      context: ./frontend-service
      dockerfile: Dockerfile
    container_name: frontend-service
    ports:
      - '4200:4200'
    volumes:
      - ./frontend-service:/app
    networks:
      - store-network

  customer-service:
    container_name: customer-service
    build:
      context: ./customer-service
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    env_file:
      - /customer-service/.env
    depends_on:
      customer-db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - store-network

  customer-db:
    image: mysql:8.3.0
    container_name: customer-db
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: customer_db
    volumes:
      - customer-db-data:/var/lib/mysql
    ports:
      - "3306:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      retries: 5
      start_period: 30s
    networks:
      - store-network

  redis:
    container_name: redis
    image: redis:7.4.2-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - store-network

volumes:
  customer-db-data:
  redis-data:

networks:
  store-network:
    driver: bridge