services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: [ "CMD-SHELL", "echo stat | nc 127.0.0.1 2181 | grep Mode" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - store-network

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list" ]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - store-network

#  frontend-service:
#    build:
#      context: ./frontend-service
#      dockerfile: Dockerfile
#    container_name: frontend-service
#    ports:
#      - '4200:4200'
#    volumes:
#      - ./frontend-service:/app
#    networks:
#      - store-network

  eureka-server:
    container_name: eureka-server
    build:
      context: ./eureka
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - store-network

  file-storage-service:
    container_name: file-storage-service
    build:
      context: ./file-storage-service
      dockerfile: Dockerfile
    ports:
      - "8084:8080"
    volumes:
      - ./file-storage-service/uploads:/app/uploads
      - ./file-storage-service/src/main/resources/static:/app/src/main/resources/static
    depends_on:
      eureka-server:
        condition: service_started
      customer-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - store-network

  customer-service:
    container_name: customer-service
    build:
      context: ./customer-service
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    env_file:
      - customer-service/.env
    depends_on:
      eureka-server:
        condition: service_started
      customer-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - store-network

  notification-service:
    container_name: notification-service
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    env_file:
      - notification-service/.env
    ports:
      - "8085:8080"
    depends_on:
      eureka-server:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - store-network

  product-service:
    container_name: product-service
    build:
      context: ./product-service
      dockerfile: Dockerfile
    env_file:
      - product-service/.env
    ports:
      - "8082:8080"
    depends_on:
      eureka-server:
        condition: service_started
      product-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - store-network

  auth-service:
    container_name: auth-service
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    env_file:
      - auth-service/.env
    ports:
      - "8083:8080"
    depends_on:
      eureka-server:
        condition: service_started
      user-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - store-network

  product-db:
    image: 'mongo:8.0.6'
    container_name: product-db
    environment:
      - 'MONGO_INITDB_DATABASE=productDB'
      - 'MONGO_INITDB_ROOT_PASSWORD=root'
      - 'MONGO_INITDB_ROOT_USERNAME=root'
    ports:
      - '27017:27017'
    volumes:
      - product-db-data:/data/db
      - ./product-service/init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - store-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ping:1})"]
      interval: 10s
      timeout: 5s
      retries: 5

  customer-db:
    image: mysql:8.3.0
    container_name: customer-db
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: customer_db
    volumes:
      - customer-db-data:/var/lib/mysql
    ports:
      - "3306:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      retries: 5
      start_period: 30s
    networks:
      - store-network

  user-db:
    image: mysql:8.3.0
    container_name: user-db
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: user_db
    volumes:
      - user-db-data:/var/lib/mysql
    ports:
      - "3307:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      retries: 5
      start_period: 30s
    networks:
      - store-network

  redis:
    container_name: redis
    image: redis:7.4.2-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - store-network

  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    env_file:
      - api-gateway/.env
    ports:
      - "8080:8080"
    depends_on:
      eureka-server:
        condition: service_started
      customer-service:
        condition: service_started
      product-service:
        condition: service_started
      auth-service:
        condition: service_started
    networks:
      - store-network

volumes:
  customer-db-data:
  user-db-data:
  redis-data:
  product-db-data:

networks:
  store-network:
    driver: bridge
    name: store-network